<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.jun.plugin.project.mapper.GenTableMapper">

	<resultMap type="GenTable" id="GenTableResult">
	    <id     property="tableId"        column="table_id"          />
        <result property="dataSourceId"   column="data_source_id"          />
		<result property="tableName"      column="table_name"        />
		<result property="tableComment"   column="table_comment"     />
		<result property="subTableName"   column="sub_table_name"    />
		<result property="subTableFkName" column="sub_table_fk_name" />
		<result property="className"      column="class_name"        />
		<result property="tplCategory"    column="tpl_category"      />
		<result property="packageName"    column="package_name"      />
		<result property="moduleName"     column="module_name"       />
		<result property="businessName"   column="business_name"     />
		<result property="functionName"   column="function_name"     />
		<result property="functionAuthor" column="function_author"   />
		<result property="genType"        column="gen_type"          />
		<result property="genPath"        column="gen_path"          />
		<result property="options"        column="options"           />
		<result property="createBy"       column="create_by"         />
		<result property="createTime"     column="create_time"       />
		<result property="updateBy"       column="update_by"         />
		<result property="updateTime"     column="update_time"       />
		<result property="remark"         column="remark"            />
		<collection property="columns" javaType="java.util.List" resultMap="GenTableColumnResult" />
	</resultMap>
	
	<resultMap type="GenTableColumn" id="GenTableColumnResult">
        <id     property="columnId"       column="column_id"      />
        <result property="tableId"        column="table_id"       />
        <result property="columnName"     column="column_name"    />
        <result property="columnComment"  column="column_comment" />
        <result property="columnType"     column="column_type"    />
        <result property="javaType"       column="java_type"      />
        <result property="javaField"      column="java_field"     />
        <result property="isPk"           column="is_pk"          />
        <result property="isIncrement"    column="is_increment"   />
        <result property="isRequired"     column="is_required"    />
        <result property="isInsert"       column="is_insert"      />
        <result property="isEdit"         column="is_edit"        />
        <result property="isList"         column="is_list"        />
        <result property="isQuery"        column="is_query"       />
        <result property="queryType"      column="query_type"     />
        <result property="htmlType"       column="html_type"      />
        <result property="dictType"       column="dict_type"      />
        <result property="sort"           column="sort"           />
        <result property="createBy"       column="create_by"      />
        <result property="createTime"     column="create_time"    />
        <result property="updateBy"       column="update_by"      />
        <result property="updateTime"     column="update_time"    />
    </resultMap>
	
	<sql id="selectGenTableVo">
        select table_id, data_source_id, table_name, table_comment, sub_table_name, sub_table_fk_name, class_name, tpl_category, package_name, module_name, business_name, function_name, function_author, gen_type, gen_path, options, create_by, create_time, update_by, update_time, remark from gen_table
    </sql>
    
    <select id="selectGenTableList" parameterType="GenTable" resultMap="GenTableResult">
		<include refid="selectGenTableVo"/>
		<where>
			<if test="tableName != null and tableName != ''">
				AND lower(table_name) like lower('%'||#{tableName}||'%')
			</if>
			<if test="tableComment != null and tableComment != ''">
				AND lower(table_comment) like lower('%'||#{tableComment}||'%')
			</if>
		</where>
	</select>
    
	<select id="selectGenTableById" parameterType="Long" resultMap="GenTableResult">
	    SELECT t.table_id, t.data_source_id, t.table_name, t.table_comment, t.sub_table_name, t.sub_table_fk_name, t.class_name, t.tpl_category, t.package_name, t.module_name, t.business_name, t.function_name, t.function_author, t.gen_type, t.gen_path, t.options, t.remark,
			   c.column_id, c.column_name, c.column_comment, c.column_type, c.java_type, c.java_field, c.is_pk, c.is_increment, c.is_required, c.is_insert, c.is_edit, c.is_list, c.is_query, c.query_type, c.html_type, c.dict_type, c.sort
		FROM gen_table t
			 LEFT JOIN gen_table_column c ON t.table_id = c.table_id
		where t.table_id = #{tableId} order by c.sort
	</select>
	
	<select id="selectGenTableByName" parameterType="String" resultMap="GenTableResult">
	    SELECT t.table_id, t.data_source_id, t.table_name, t.table_comment, t.sub_table_name, t.sub_table_fk_name, t.class_name, t.tpl_category, t.package_name, t.module_name, t.business_name, t.function_name, t.function_author, t.gen_type, t.gen_path, t.options, t.remark,
			   c.column_id, c.column_name, c.column_comment, c.column_type, c.java_type, c.java_field, c.is_pk, c.is_increment, c.is_required, c.is_insert, c.is_edit, c.is_list, c.is_query, c.query_type, c.html_type, c.dict_type, c.sort
		FROM gen_table t
			 LEFT JOIN gen_table_column c ON t.table_id = c.table_id
		where t.table_name = #{tableName} order by c.sort
	</select>
	
    <select id="selectGenTableAll" parameterType="Long" resultMap="GenTableResult">
        SELECT t.table_id, t.data_source_id, t.table_name, t.table_comment, t.sub_table_name, t.sub_table_fk_name, t.class_name, t.tpl_category, t.package_name, t.module_name, t.business_name, t.function_name, t.function_author, t.gen_type, t.gen_path, t.options, t.remark,
               c.column_id, c.column_name, c.column_comment, c.column_type, c.java_type, c.java_field, c.is_pk, c.is_increment, c.is_required, c.is_insert, c.is_edit, c.is_list, c.is_query, c.query_type, c.html_type, c.dict_type, c.sort
        FROM gen_table t
             LEFT JOIN gen_table_column c ON t.table_id = c.table_id
        <where>
            <if test="dataSourceId != null and dataSourceId != 0">
                AND t.data_source_id = #{dataSourceId}
            </if>
        </where> 
        order by c.sort
    </select>
    
	<insert id="insertGenTable" parameterType="GenTable" useGeneratedKeys="true" keyProperty="tableId">
        insert into gen_table (
			<if test="tableName != null">table_name,</if>
			<if test="dataSourceId != null">data_source_id,</if>
			<if test="tableComment != null and tableComment != ''">table_comment,</if>
			<if test="className != null and className != ''">class_name,</if>
			<if test="tplCategory != null and tplCategory != ''">tpl_category,</if>
			<if test="packageName != null and packageName != ''">package_name,</if>
			<if test="moduleName != null and moduleName != ''">module_name,</if>
			<if test="businessName != null and businessName != ''">business_name,</if>
			<if test="functionName != null and functionName != ''">function_name,</if>
			<if test="functionAuthor != null and functionAuthor != ''">function_author,</if>
			<if test="genType != null and genType != ''">gen_type,</if>
			<if test="genPath != null and genPath != ''">gen_path,</if>
			<if test="remark != null and remark != ''">remark,</if>
 			<if test="createBy != null and createBy != ''">create_by,</if>
			create_time
         )values(
			<if test="tableName != null">#{tableName},</if>
			<if test="dataSourceId != null">#{dataSourceId},</if>
			<if test="tableComment != null and tableComment != ''">#{tableComment},</if>
			<if test="className != null and className != ''">#{className},</if>
			<if test="tplCategory != null and tplCategory != ''">#{tplCategory},</if>
			<if test="packageName != null and packageName != ''">#{packageName},</if>
			<if test="moduleName != null and moduleName != ''">#{moduleName},</if>
			<if test="businessName != null and businessName != ''">#{businessName},</if>
			<if test="functionName != null and functionName != ''">#{functionName},</if>
			<if test="functionAuthor != null and functionAuthor != ''">#{functionAuthor},</if>
			<if test="genType != null and genType != ''">#{genType},</if>
			<if test="genPath != null and genPath != ''">#{genPath},</if>
			<if test="remark != null and remark != ''">#{remark},</if>
 			<if test="createBy != null and createBy != ''">#{createBy},</if>
			strftime('%Y-%m-%d %H:%M:%S', 'now', 'localtime')
         )
    </insert>
    
    <update id="updateGenTable" parameterType="GenTable">
        update gen_table
        <set>
            <if test="tableName != null">table_name = #{tableName},</if>
            <if test="dataSourceId != null">data_source_id = #{dataSourceId},</if>
            <if test="tableComment != null and tableComment != ''">table_comment = #{tableComment},</if>
            <if test="subTableName != null">sub_table_name = #{subTableName},</if>
            <if test="subTableFkName != null">sub_table_fk_name = #{subTableFkName},</if>
            <if test="className != null and className != ''">class_name = #{className},</if>
            <if test="functionAuthor != null and functionAuthor != ''">function_author = #{functionAuthor},</if>
            <if test="genType != null and genType != ''">gen_type = #{genType},</if>
            <if test="genPath != null and genPath != ''">gen_path = #{genPath},</if>
            <if test="tplCategory != null and tplCategory != ''">tpl_category = #{tplCategory},</if>
            <if test="packageName != null and packageName != ''">package_name = #{packageName},</if>
            <if test="moduleName != null and moduleName != ''">module_name = #{moduleName},</if>
            <if test="businessName != null and businessName != ''">business_name = #{businessName},</if>
            <if test="functionName != null and functionName != ''">function_name = #{functionName},</if>
            <if test="options != null and options != ''">options = #{options},</if>
            <if test="updateBy != null and updateBy != ''">update_by = #{updateBy},</if>
            <if test="remark != null">remark = #{remark},</if>
            update_time = strftime('%Y-%m-%d %H:%M:%S', 'now', 'localtime')
        </set>
        where table_id = #{tableId}
    </update>
    
    <delete id="deleteGenTableByIds" parameterType="Long">
        delete from gen_table where table_id in 
        <foreach collection="array" item="tableId" open="(" separator="," close=")">
            #{tableId}
        </foreach>
    </delete>
    
    <!-- 查询目标库中的表 -->
    <select id="selectDbTableList" resultMap="GenTableResult">
        <choose>
            <when test="dbType != null and dbType == 'mysql'">
                <include refid="MySQL_SelectDbTableList"/>
            </when>
            <when test="dbType != null and dbType == 'oracle'">
                <include refid="Oracle_SelectDbTableList"/>
            </when>
            <when test="dbType != null and dbType == 'pgsql'">
                <include refid="Postgre_SelectDbTableList"/>
            </when>
            <when test="dbType != null and dbType == 'sqlserver'">
                <include refid="SqlServer_SelectDbTableList"/>
            </when>
            <otherwise>
                
            </otherwise>
        </choose>
    </select>
    
    <!-- 根据表名称查询目标库中的表 -->
    <select id="selectDbTableListByNames" resultMap="GenTableResult">
        <choose>
            <when test="dbType != null and dbType == 'mysql'">
                <include refid="MySQL_SelectDbTableListByNames"/>
            </when>
            <when test="dbType != null and dbType == 'oracle'">
                <include refid="Oracle_SelectDbTableListByNames"/>
            </when>
            <when test="dbType != null and dbType == 'pgsql'">
                <include refid="Postgre_SelectDbTableListByNames"/>
            </when>
            <when test="dbType != null and dbType == 'sqlserver'">
                <include refid="SqlServer_SelectDbTableListByNames"/>
            </when>
            <otherwise>
                
            </otherwise>
        </choose>
    </select>
    
    <!-- 根据表名称查询目标库中表的字段集合 -->
    <select id="selectDbTableColumnsByName" parameterType="String" resultMap="GenTableColumnResult">
        <choose>
            <when test="dbType != null and dbType == 'mysql'">
                <include refid="MySQL_SelectDbTableColumnsByName"/>
            </when>
            <when test="dbType != null and dbType == 'oracle'">
                <include refid="Oracle_SelectDbTableColumnsByName"/>
            </when>
            <when test="dbType != null and dbType == 'pgsql'">
                <include refid="Postgre_SelectDbTableColumnsByName"/>
            </when>
            <when test="dbType != null and dbType == 'sqlserver'">
                <include refid="SqlServer_SelectDbTableColumnsByName"/>
            </when>
            <otherwise>
                
            </otherwise>
        </choose>
    </select>
    
    <!-- 适配目标库类型(查询目标库中的表) begin -->
    <sql id="MySQL_SelectDbTableList">
        select table_name, table_comment, create_time, update_time from information_schema.tables
        where table_schema = (select database())
        AND table_name NOT LIKE 'qrtz_%' AND table_name NOT LIKE 'gen_%'
        <if test="genTable != null and genTable.tableName != null and genTable.tableName != ''">
            AND lower(table_name) like lower(concat('%', #{genTable.tableName}, '%'))
        </if>
        <if test="genTable != null and genTable.tableComment != null and genTable.tableComment != ''">
            AND lower(table_comment) like lower(concat('%', #{genTable.tableComment}, '%'))
        </if>
    </sql>
    <sql id="Oracle_SelectDbTableList">
        select lower(dt.table_name) as table_name, dtc.comments as table_comment, uo.created as create_time, uo.last_ddl_time as update_time
        from user_tables dt, user_tab_comments dtc, user_objects uo
        where dt.table_name = dtc.table_name
        and dt.table_name = uo.object_name
        and uo.object_type = 'TABLE'
        AND dt.table_name NOT LIKE 'QRTZ_%' AND dt.table_name NOT LIKE 'GEN_%'
        <if test="genTable != null and genTable.tableName != null and genTable.tableName != ''">
            AND lower(dt.table_name)  like lower(concat(concat('%', #{genTable.tableName}), '%'))
        </if>
        <if test="genTable != null and genTable.tableComment != null and genTable.tableComment != ''">
            AND lower(dtc.comments) like lower(concat(concat('%', #{genTable.tableComment}), '%'))
        </if>
    </sql>
    <sql id="Postgre_SelectDbTableList">
        select a.relname as table_name, b.description as table_comment 
        from pg_class a
        left join (select * from pg_description where objsubid = 0 ) b on a.oid = b.objoid
        where a.relname in (select tablename from pg_tables where schemaname = (select current_schema()))
        AND a.relname NOT LIKE 'qrtz_%' AND a.relname NOT LIKE 'gen_%'
        <if test="genTable != null and genTable.tableName != null and genTable.tableName != ''">
            AND a.relname  like lower(concat('%', #{genTable.tableName}, '%'))
        </if>
        <if test="genTable != null and genTable.tableComment != null and genTable.tableComment != ''">
            AND a.relname like lower(concat('%', #{genTable.tableComment}, '%'))
        </if>
    </sql>
    <sql id="SqlServer_SelectDbTableList">
        SELECT cast(D.NAME as nvarchar) as table_name,cast(F.VALUE as nvarchar) as table_comment,
        crdate as create_time,refdate as update_time FROM    SYSOBJECTS   D
        inner   JOIN   SYS.EXTENDED_PROPERTIES F   ON   D.ID=F.MAJOR_ID
        AND   F.MINOR_ID=0 AND   D.XTYPE='U' AND  D.NAME!='DTPROPERTIES'
        AND D.NAME NOT LIKE 'QRTZ_%' AND D.NAME NOT LIKE 'GEN_%'
        <if test="genTable != null and genTable.tableName != null and genTable.tableName != ''">
            AND lower(table_name)  like lower(concat('%', #{genTable.tableName}, '%'))
        </if>
        <if test="genTable != null and genTable.tableComment != null and genTable.tableComment != ''">
            AND lower(table_comment) like lower(concat('%', #{genTable.tableComment}, '%'))
        </if>
    </sql>
    <!-- 适配目标库类型(查询目标库中的表) end -->
    
    <!-- 适配目标库类型(根据表名称查询目标库中的表) begin -->
    <sql id="MySQL_SelectDbTableListByNames">
        select table_name, table_comment, create_time, update_time from information_schema.tables
        where table_name NOT LIKE 'qrtz_%' and table_name NOT LIKE 'gen_%' and table_schema = (select database())
        and table_name in
        <foreach collection="tableNames" item="name" open="(" separator="," close=")">
            #{name}
        </foreach> 
    </sql>
    <sql id="Oracle_SelectDbTableListByNames">
        select lower(dt.table_name) as table_name, dtc.comments as table_comment, uo.created as create_time, uo.last_ddl_time as update_time
        from user_tables dt, user_tab_comments dtc, user_objects uo
        where dt.table_name = dtc.table_name
        and dt.table_name = uo.object_name
        and uo.object_type = 'TABLE'
        AND dt.table_name NOT LIKE 'QRTZ_%' AND dt.table_name NOT LIKE 'GEN_%'
        and lower(dt.table_name) in
        <foreach collection="tableNames" item="name" open="(" separator="," close=")">
            #{name}
        </foreach> 
    </sql>
    <sql id="Postgre_SelectDbTableListByNames">
        select a.relname as table_name, b.description as table_comment 
        from pg_class a
        left join (select * from pg_description where objsubid = 0 ) b on a.oid = b.objoid
        where a.relname in (select tablename from pg_tables where schemaname = (select current_schema()))
        AND a.relname NOT LIKE 'qrtz_%' AND a.relname NOT LIKE 'gen_%'
        AND a.relname in
        <foreach collection="tableNames" item="name" open="(" separator="," close=")">
            #{name}
        </foreach> 
    </sql>
    <sql id="SqlServer_SelectDbTableListByNames">
        SELECT cast(D.NAME as nvarchar) as table_name,cast(F.VALUE as nvarchar) as table_comment,
        crdate as create_time,refdate as update_time FROM    SYSOBJECTS   D
        inner   JOIN   SYS.EXTENDED_PROPERTIES F   ON   D.ID=F.MAJOR_ID
        AND   F.MINOR_ID=0 AND   D.XTYPE='U' AND  D.NAME!='DTPROPERTIES'
        AND D.NAME NOT LIKE 'QRTZ_%' AND D.NAME NOT LIKE 'GEN_%'
        AND D.NAME in
        <foreach collection="tableNames" item="name" open="(" separator="," close=")">
            #{name}
        </foreach> 
    </sql>
    <!-- 适配目标库类型(根据表名称查询目标库中的表) end -->
    
    <!-- 适配目标库类型(根据表名称查询目标库中表的字段集合) begin -->
    <sql id="MySQL_SelectDbTableColumnsByName">
        select column_name, (case when (is_nullable = 'no' and column_key != 'PRI') then '1' else null end) as is_required, (case when column_key = 'PRI' then '1' else '0' end) as is_pk, ordinal_position as sort, column_comment, (case when extra = 'auto_increment' then '1' else '0' end) as is_increment, column_type
        from information_schema.columns where table_schema = (select database()) and table_name = (#{tableName})
        order by ordinal_position
    </sql>
    <sql id="Oracle_SelectDbTableColumnsByName">
        select lower(temp.column_name) as column_name,
                (case when (temp.nullable = 'N'  and  temp.constraint_type != 'P') then '1' else null end) as is_required,
                (case when temp.constraint_type = 'P' then '1' else '0' end) as is_pk,
                temp.column_id as sort,
                temp.comments as column_comment,
                (case when temp.constraint_type = 'P' then '1' else '0' end) as is_increment,
                lower(temp.data_type) as column_type
           from (
                  select col.column_id, col.column_name,col.nullable, col.data_type, colc.comments, uc.constraint_type
                       , row_number() over (partition by col.column_name order by uc.constraint_type desc) as row_flg
                  from user_tab_columns col
                  left join user_col_comments colc on colc.table_name = col.table_name and colc.column_name = col.column_name
                  left join user_cons_columns ucc on ucc.table_name = col.table_name and ucc.column_name = col.column_name
                  left join user_constraints uc on uc.constraint_name = ucc.constraint_name
                 where col.table_name = upper(#{tableName})
                  ) temp
          WHERE temp.row_flg = 1
          ORDER BY temp.column_id
    </sql>
    <sql id="Postgre_SelectDbTableColumnsByName">
        select sc.column_name,
        (case when sc.is_nullable = 'NO' then '1' else '0' end) as is_required,
        (case when b.pk_name is null then '0' else '1' end) as is_pk,
        ordinal_position as sort,
        c.column_comment,
        (case when sc.is_identity = 'NO' then '0' else '1' end) as is_increment,
        udt_name as column_type
        from information_schema.columns sc
        left join(
            select pg_attr.attname as column_name,pg_constraint.conname as pk_name 
            from pg_constraint  
            inner join pg_class on pg_constraint.conrelid = pg_class.oid 
            inner join pg_attribute pg_attr on pg_attr.attrelid = pg_class.oid and  pg_attr.attnum = pg_constraint.conkey[1] 
            inner join pg_type on pg_type.oid = pg_attr.atttypid
            where pg_class.relname = #{tableName} 
            and pg_constraint.contype='p' 
        ) b on b.column_name = sc.column_name
        left join (
            select attname as column_name,description as column_comment 
            from pg_class
            left join pg_attribute pg_attr on pg_attr.attrelid= pg_class.oid
            left join pg_description pg_desc on pg_desc.objoid = pg_attr.attrelid and pg_desc.objsubid=pg_attr.attnum
            where pg_attr.attnum > 0 and pg_attr.attrelid = pg_class.oid 
            and pg_class.relname = #{tableName}
        ) c on c.column_name = sc.column_name
        where table_schema=(select current_schema()) and table_name=#{tableName} order by ordinal_position asc
    </sql>
    <sql id="SqlServer_SelectDbTableColumnsByName">
        SELECT
            cast(A.NAME as nvarchar) as column_name,
            cast(B.NAME as nvarchar) + (case when B.NAME ='numeric' then '('+cast(A.prec as nvarchar)+','+cast(A.scale as nvarchar)+')' else '' end) as column_type,
            cast(G.[VALUE] as nvarchar) as column_comment,
            (SELECT 1  FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE Z  WHERE TABLE_NAME=D.NAME and A.NAME = Z.column_name  ) as is_pk,
            colorder as sort
        FROM   SYSCOLUMNS   A
            LEFT   JOIN   SYSTYPES   B   ON   A.XTYPE=B.XUSERTYPE
            INNER   JOIN   SYSOBJECTS   D   ON   A.ID=D.ID     AND   D.XTYPE='U'   AND     D.NAME!='DTPROPERTIES'
            LEFT   JOIN   SYS.EXTENDED_PROPERTIES G   ON   A.ID=G.MAJOR_ID   AND   A.COLID=G.MINOR_ID
            LEFT   JOIN   SYS.EXTENDED_PROPERTIES F   ON   D.ID=F.MAJOR_ID   AND   F.MINOR_ID   =0
        where   D.NAME = #{tableName}
        ORDER   BY   A.COLORDER
    </sql>
    <!-- 适配目标库类型(根据表名称查询目标库中表的字段集合) end -->
</mapper> 